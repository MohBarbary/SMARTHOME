
Barbary_GPROJECT_M13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000524  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e14  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c37  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fb1  00000000  00000000  00003213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  000041c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000839  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001084  00000000  00000000  00004cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00005d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 94 01 	call	0x328	; 0x328 <main>
  7a:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <APP_authority>:
 * 
 * @param au8_Authority the variable containing the Authority of the MCU (!USE THE MACROS!)
 */
void APP_authority(u8_t au8_selectAuthority){
	
	if (!au8_selectAuthority) //IF AUTH == 0 THEN MCU IS MASTER ELSE MCU IS SLAVE
  82:	81 11       	cpse	r24, r1
  84:	03 c0       	rjmp	.+6      	; 0x8c <APP_authority+0xa>
	{
		gu8_Authority = 0;
  86:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
  8a:	08 95       	ret
	} 
	else
	{
		gu8_Authority = 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  92:	08 95       	ret

00000094 <APP_init>:
 * @brief Initializes the application (MASTER/SLAVE have different initializations).
 * 
 */
void APP_init(void){
	
	if(!gu8_Authority) //CHECK IF MASTER MCU
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  98:	81 11       	cpse	r24, r1
  9a:	15 c0       	rjmp	.+42     	; 0xc6 <APP_init+0x32>
	{
		//ESTABLISHING BLUETOOTH CONNECTION
		HAL_establishBluetooth(BLUETOOTH_DATA_BAUDRATE);
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 ad 00 	call	0x15a	; 0x15a <HAL_establishBluetooth>
		
		//INITIALIZING SPI CONNECTION FOR A MASTER//
		
		//SET SS, MOSI, SCLK -> OUTPUT respectively.
		MCAL_GPIO_PinMode(PORTB, (PIN4 | PIN5 | PIN7), OUTPUT);
  a4:	42 e0       	ldi	r20, 0x02	; 2
  a6:	60 eb       	ldi	r22, 0xB0	; 176
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
		//SET MISO -> INPUT_FLOAT
		MCAL_GPIO_PinMode(PORTB, PIN6, INPUT_FLOAT);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	60 e4       	ldi	r22, 0x40	; 64
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
		
		//INITIALIZING A MASTER SPI
		MCAL_SPI_init(MCAL_SPI_MASTER, MCAL_SPI_MSB, MCAL_SPI_SAMPLE_R_SETUP_F, MCAL_SPI_CLK_BY_16);
  b8:	23 e0       	ldi	r18, 0x03	; 3
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_SPI_init>
  c4:	08 95       	ret
	}
	else //SLAVE MCU COMMANDS
	{
		
		//SET SS, MOSI, SCLK -> INPUT_FLOAT respectively.
		MCAL_GPIO_PinMode(PORTB, (PIN4 | PIN5 | PIN7), INPUT_FLOAT);
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	60 eb       	ldi	r22, 0xB0	; 176
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
		//SET MISO -> OUTPUT
		MCAL_GPIO_PinMode(PORTB, PIN6, OUTPUT);
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	60 e4       	ldi	r22, 0x40	; 64
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
		
		//INITIALIZING A SLAVE SPI
		MCAL_SPI_init(MCAL_SPI_SLAVE, MCAL_SPI_MSB, MCAL_SPI_SAMPLE_R_SETUP_F, MCAL_SPI_CLK_BY_16);
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_SPI_init>
		
		//INITIALIZE THE LCD
		HAL_LCD_init();
  e6:	0e 94 29 01 	call	0x252	; 0x252 <HAL_LCD_init>
		//INITIALIZE THE LED PINS
		HAL_LED_init();
  ea:	0e 94 8e 01 	call	0x31c	; 0x31c <HAL_LED_init>
		
		//INITIALIZE GARAGE MOTOR
		MCAL_GPIO_PinMode(PORTC, PIN0, OUTPUT);
  ee:	42 e0       	ldi	r20, 0x02	; 2
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
  f8:	08 95       	ret

000000fa <APP_recvCMD>:
 * 
 * @param pu8_dataHolder A pointer to the variable that will hold the data received.
 */
void APP_recvCMD(u8_t* pu8_dataHolder){
	
	if (!gu8_Authority)
  fa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
  fe:	21 11       	cpse	r18, r1
 100:	03 c0       	rjmp	.+6      	; 0x108 <APP_recvCMD+0xe>
	{
		//CALLING THE RECEPTIVE BLUETOOTH FUNCTION
		HAL_recvBluetooth(pu8_dataHolder);	
 102:	0e 94 c0 00 	call	0x180	; 0x180 <HAL_recvBluetooth>
 106:	08 95       	ret
	} 
	else
	{
		MCAL_SPI_slaveSendRecvByte(0, pu8_dataHolder); //DO I NEED TO SEND DATA?
 108:	bc 01       	movw	r22, r24
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <MCAL_SPI_slaveSendRecvByte>
 110:	08 95       	ret

00000112 <APP_sendCMD>:
 * @brief Sends a command via SPI (MASTER ONLY COMMAND)
 * 
 * @param au8_dataSent A variable containing the data to be sent.
 * @param pu8_dataRecv A pointer to a variable for the data to be received.
 */
void APP_sendCMD(u8_t au8_dataSent, u8_t* pu8_dataRecv){
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
	
	if (!gu8_Authority) //IF MASTER
 118:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 11c:	91 11       	cpse	r25, r1
 11e:	19 c0       	rjmp	.+50     	; 0x152 <APP_sendCMD+0x40>
 120:	8b 01       	movw	r16, r22
 122:	c8 2f       	mov	r28, r24
	{
		//PULL SS TO LOW TO INITIATE TRANSACTION
		MCAL_GPIO_PinState(PORTB, PIN4, LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	60 e1       	ldi	r22, 0x10	; 16
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
		
		//SENDING & RECEIVING SPI DATA AS A MASTER
		MCAL_SPI_masterSendRecvByte(au8_dataSent, pu8_dataRecv);
 12e:	b8 01       	movw	r22, r16
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 6d 02 	call	0x4da	; 0x4da <MCAL_SPI_masterSendRecvByte>
		
		//PULL SS TO HIGH END TRANSACTION
		MCAL_GPIO_PinState(PORTB, PIN4, HIGH);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	60 e1       	ldi	r22, 0x10	; 16
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	80 e7       	ldi	r24, 0x70	; 112
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <APP_sendCMD+0x34>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <APP_sendCMD+0x3e>
 150:	00 00       	nop
	{
		//DO NOTHING
	}
	
	return;
}
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <HAL_establishBluetooth>:
 * @brief Establishes a Bluetooth connection with a given BAUD RATE. (!PLEASE USE THE DEFAULT BAUD-RATE FOR BLUETOOTH!)
 * 
 * @param au16_baudRate variable that contains the BAUD RATE to be passed to the function.
 */

void HAL_establishBluetooth(u16_t au16_baudRate){
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
	
	//SETTING RX PIN
	MCAL_GPIO_PinMode(PORTD, PIN0, INPUT_FLOAT);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
	
	//SETTING TX PIN
	MCAL_GPIO_PinMode(PORTD, PIN1, OUTPUT);
 16a:	42 e0       	ldi	r20, 0x02	; 2
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
	
	//INITIALIZE THE UART CONNECTION TO TRANSMIT DATA
	MCAL_UART_init(au16_baudRate);
 174:	ce 01       	movw	r24, r28
 176:	0e 94 83 02 	call	0x506	; 0x506 <MCAL_UART_init>
	
	return;
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <HAL_recvBluetooth>:
 * @param pu8_dataHolder pointer to the variable that contains the data received from the BLUETOOTH Transmission.
 */
void HAL_recvBluetooth(u8_t* pu8_dataHolder){
	
	//RECEIVE A BYTE FROM THE SENDER (MOBILE DEVICE ON BLUTERM)
	MCAL_UART_recvByte(pu8_dataHolder);
 180:	0e 94 8a 02 	call	0x514	; 0x514 <MCAL_UART_recvByte>
 184:	08 95       	ret

00000186 <HAL_LCD_sendCMD>:
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
	
	return;
}
 186:	cf 93       	push	r28
 188:	c8 2f       	mov	r28, r24
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 19e:	c4 fb       	bst	r28, 4
 1a0:	44 27       	eor	r20, r20
 1a2:	40 f9       	bld	r20, 0
 1a4:	60 e1       	ldi	r22, 0x10	; 16
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 1ac:	c5 fb       	bst	r28, 5
 1ae:	44 27       	eor	r20, r20
 1b0:	40 f9       	bld	r20, 0
 1b2:	60 e2       	ldi	r22, 0x20	; 32
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 1ba:	c6 fb       	bst	r28, 6
 1bc:	44 27       	eor	r20, r20
 1be:	40 f9       	bld	r20, 0
 1c0:	60 e4       	ldi	r22, 0x40	; 64
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 1c8:	4c 2f       	mov	r20, r28
 1ca:	44 1f       	adc	r20, r20
 1cc:	44 27       	eor	r20, r20
 1ce:	44 1f       	adc	r20, r20
 1d0:	60 e8       	ldi	r22, 0x80	; 128
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	68 e0       	ldi	r22, 0x08	; 8
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 1e2:	87 ec       	ldi	r24, 0xC7	; 199
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <HAL_LCD_sendCMD+0x60>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <HAL_LCD_sendCMD+0x66>
 1ec:	00 00       	nop
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	68 e0       	ldi	r22, 0x08	; 8
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 1f8:	4c 2f       	mov	r20, r28
 1fa:	41 70       	andi	r20, 0x01	; 1
 1fc:	60 e1       	ldi	r22, 0x10	; 16
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 204:	c1 fb       	bst	r28, 1
 206:	44 27       	eor	r20, r20
 208:	40 f9       	bld	r20, 0
 20a:	60 e2       	ldi	r22, 0x20	; 32
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 212:	c2 fb       	bst	r28, 2
 214:	44 27       	eor	r20, r20
 216:	40 f9       	bld	r20, 0
 218:	60 e4       	ldi	r22, 0x40	; 64
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 220:	c3 fb       	bst	r28, 3
 222:	44 27       	eor	r20, r20
 224:	40 f9       	bld	r20, 0
 226:	60 e8       	ldi	r22, 0x80	; 128
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	68 e0       	ldi	r22, 0x08	; 8
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 238:	87 ec       	ldi	r24, 0xC7	; 199
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <HAL_LCD_sendCMD+0xb6>
 240:	00 c0       	rjmp	.+0      	; 0x242 <HAL_LCD_sendCMD+0xbc>
 242:	00 00       	nop
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	68 e0       	ldi	r22, 0x08	; 8
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <HAL_LCD_init>:
 * 
 */
void HAL_LCD_init(void){
	
	//SET CTRL PINS TO OUTPUT
	MCAL_GPIO_PinMode(HAL_LCD_CTRL_PORT, (HAL_LCD_RS_PIN | HAL_LCD_RW_PIN | HAL_LCD_EN_PIN), OUTPUT);
 252:	42 e0       	ldi	r20, 0x02	; 2
 254:	6e e0       	ldi	r22, 0x0E	; 14
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
	
	//SET DATA PINS TO OUTPUT
	MCAL_GPIO_PinMode(HAL_LCD_DATA_PORT, (HAL_LCD_D4_PIN | HAL_LCD_D5_PIN | HAL_LCD_D6_PIN | HAL_LCD_D7_PIN), OUTPUT);
 25c:	42 e0       	ldi	r20, 0x02	; 2
 25e:	60 ef       	ldi	r22, 0xF0	; 240
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
	
	//Initialize enable TO HIGH
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	68 e0       	ldi	r22, 0x08	; 8
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	80 e7       	ldi	r24, 0x70	; 112
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <HAL_LCD_init+0x24>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <HAL_LCD_init+0x2e>
 280:	00 00       	nop
	
	//INITIALIZE THE LCD
	_delay_ms(50);
	
	//Set RS PIN OF CTRL PORT TO LOW (SEND CMD)
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RS_PIN, LOW);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	
	//Set R/W PIN TO LOW TO WRITE OVER LCD
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RW_PIN, LOW);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	64 e0       	ldi	r22, 0x04	; 4
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	
	//Getting the pin state of au8_cmd and setting each pin with same value [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D4_PIN, LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	60 e1       	ldi	r22, 0x10	; 16
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D5_PIN, HIGH);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	60 e2       	ldi	r22, 0x20	; 32
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D6_PIN, LOW);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	60 e4       	ldi	r22, 0x40	; 64
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D7_PIN, LOW);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	60 e8       	ldi	r22, 0x80	; 128
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	
	//sending enable signal for [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	68 e0       	ldi	r22, 0x08	; 8
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	87 ec       	ldi	r24, 0xC7	; 199
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <HAL_LCD_init+0x7a>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <HAL_LCD_init+0x80>
 2d2:	00 00       	nop
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	68 e0       	ldi	r22, 0x08	; 8
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 16 02 	call	0x42c	; 0x42c <MCAL_GPIO_PinState>
	
	//Function set command
	HAL_LCD_sendCMD(0x2C);
 2de:	8c e2       	ldi	r24, 0x2C	; 44
 2e0:	0e 94 c3 00 	call	0x186	; 0x186 <HAL_LCD_sendCMD>
 2e4:	87 ec       	ldi	r24, 0xC7	; 199
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <HAL_LCD_init+0x96>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <HAL_LCD_init+0x9c>
 2ee:	00 00       	nop
	
	//wait for 50us
	_delay_us(50);
	
	//Display ON/OFF command
	HAL_LCD_sendCMD(0x0F);
 2f0:	8f e0       	ldi	r24, 0x0F	; 15
 2f2:	0e 94 c3 00 	call	0x186	; 0x186 <HAL_LCD_sendCMD>
 2f6:	87 ec       	ldi	r24, 0xC7	; 199
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <HAL_LCD_init+0xa8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <HAL_LCD_init+0xae>
 300:	00 00       	nop
	
	//wait for 50us
	_delay_us(50);
	
	//CLEAR DISPLAY command
	HAL_LCD_sendCMD(0x01);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 c3 00 	call	0x186	; 0x186 <HAL_LCD_sendCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	8f e3       	ldi	r24, 0x3F	; 63
 30a:	9f e1       	ldi	r25, 0x1F	; 31
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <HAL_LCD_init+0xba>
 310:	00 c0       	rjmp	.+0      	; 0x312 <HAL_LCD_init+0xc0>
 312:	00 00       	nop
	
	_delay_ms(2); //!SUPER IMPORTANT!//
	
	//Entry mode command
	HAL_LCD_sendCMD(0x06);
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	0e 94 c3 00 	call	0x186	; 0x186 <HAL_LCD_sendCMD>
 31a:	08 95       	ret

0000031c <HAL_LED_init>:
 * 
 */
void HAL_LED_init(void){
	
	//SET PIN0, PIN1, PIN4 and PIN5 as OUTPUTS.
	MCAL_GPIO_PinMode(PORTD, (PIN0 | PIN1 | PIN4 | PIN5), OUTPUT);
 31c:	42 e0       	ldi	r20, 0x02	; 2
 31e:	63 e3       	ldi	r22, 0x33	; 51
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	0e 94 ad 01 	call	0x35a	; 0x35a <MCAL_GPIO_PinMode>
 326:	08 95       	ret

00000328 <main>:
 * @brief main entry point for the program.
 * 
 * @return int (0 on successful completion of the main or anything else for errors).
 */
int main(void)
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	00 d0       	rcall	.+0      	; 0x32e <main+0x6>
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
	u8_t au8_variable = 0;								//INITIALIZING VARIABLES FOR USE WITH UART AND SPI COMMS
 332:	19 82       	std	Y+1, r1	; 0x01
	u8_t au8_variable2;
								
	APP_authority(MASTER_MCU);							//GIVING OUR MCU MASTER AUTHORITY OF THE APP LAYER
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 41 00 	call	0x82	; 0x82 <APP_authority>

	APP_init(); 										//INITIALIZING THE MASTER APPLICATION
 33a:	0e 94 4a 00 	call	0x94	; 0x94 <APP_init>
    while (1) 
    {
		APP_recvCMD(&au8_variable);						//RECEIVE THE COMMAND TO BE EXECUTED FROM MOBILE APP TERMINAL THROUGH BLUETOOTH
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	0e 94 7d 00 	call	0xfa	; 0xfa <APP_recvCMD>
		if(au8_variable)								//IGNORING THE ZERO WITH THE IF CONDITION
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	88 23       	and	r24, r24
 34a:	c9 f3       	breq	.-14     	; 0x33e <main+0x16>
		{
			APP_sendCMD(au8_variable, &au8_variable2);	//SEND THE COMMAND TO BE EXECUTED TO MCU2 THROUGH SPI
 34c:	be 01       	movw	r22, r28
 34e:	6e 5f       	subi	r22, 0xFE	; 254
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	0e 94 89 00 	call	0x112	; 0x112 <APP_sendCMD>
			au8_variable = 0;							//RESET THE VARIABLE BEFORE RESTARTING THE SUPERLOOP
 356:	19 82       	std	Y+1, r1	; 0x01
 358:	f2 cf       	rjmp	.-28     	; 0x33e <main+0x16>

0000035a <MCAL_GPIO_PinMode>:
void MCAL_GPIO_PinMode(u8_t au8_port , u8_t au8_pin , u8_t au8_type){
	/**
	 * @brief We will switch over the au_8port given and once we find it, we will switch over the au8_type and then we set up our mode.
	 * 
	 */
	switch(au8_port){
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	f9 f0       	breq	.+62     	; 0x39c <MCAL_GPIO_PinMode+0x42>
 35e:	30 f0       	brcs	.+12     	; 0x36c <MCAL_GPIO_PinMode+0x12>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	a1 f1       	breq	.+104    	; 0x3cc <MCAL_GPIO_PinMode+0x72>
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	09 f4       	brne	.+2      	; 0x36a <MCAL_GPIO_PinMode+0x10>
 368:	49 c0       	rjmp	.+146    	; 0x3fc <MCAL_GPIO_PinMode+0xa2>
 36a:	08 95       	ret
		/**
		 * @brief The registers used in order to alter the I/P or O/P modes. MCAL_DDRx, MCAL_PORTx.
		 * 
		 */
		case PORTA:
			switch(au8_type)
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	49 f0       	breq	.+18     	; 0x382 <MCAL_GPIO_PinMode+0x28>
 370:	18 f0       	brcs	.+6      	; 0x378 <MCAL_GPIO_PinMode+0x1e>
 372:	42 30       	cpi	r20, 0x02	; 2
 374:	79 f0       	breq	.+30     	; 0x394 <MCAL_GPIO_PinMode+0x3a>
 376:	08 95       	ret
			{
				case INPUT_FLOAT:
					MCAL_DDRA &= ~au8_pin;
 378:	8a b3       	in	r24, 0x1a	; 26
 37a:	60 95       	com	r22
 37c:	68 23       	and	r22, r24
 37e:	6a bb       	out	0x1a, r22	; 26
					break;
 380:	08 95       	ret
				case INPUT_PULLUP:
					MCAL_DDRA &= ~au8_pin;
 382:	8a b3       	in	r24, 0x1a	; 26
 384:	96 2f       	mov	r25, r22
 386:	90 95       	com	r25
 388:	89 23       	and	r24, r25
 38a:	8a bb       	out	0x1a, r24	; 26
					MCAL_PORTA |= au8_pin;
 38c:	8b b3       	in	r24, 0x1b	; 27
 38e:	68 2b       	or	r22, r24
 390:	6b bb       	out	0x1b, r22	; 27
					break;
 392:	08 95       	ret
				case OUTPUT:
					MCAL_DDRA |= au8_pin;
 394:	8a b3       	in	r24, 0x1a	; 26
 396:	68 2b       	or	r22, r24
 398:	6a bb       	out	0x1a, r22	; 26
					break;
 39a:	08 95       	ret
				default:
					break;
			}
			break;
		case PORTB:
		switch(au8_type)
 39c:	41 30       	cpi	r20, 0x01	; 1
 39e:	49 f0       	breq	.+18     	; 0x3b2 <MCAL_GPIO_PinMode+0x58>
 3a0:	18 f0       	brcs	.+6      	; 0x3a8 <MCAL_GPIO_PinMode+0x4e>
 3a2:	42 30       	cpi	r20, 0x02	; 2
 3a4:	79 f0       	breq	.+30     	; 0x3c4 <MCAL_GPIO_PinMode+0x6a>
 3a6:	08 95       	ret
		{
			case INPUT_FLOAT:
				MCAL_DDRB &= ~au8_pin;
 3a8:	87 b3       	in	r24, 0x17	; 23
 3aa:	60 95       	com	r22
 3ac:	68 23       	and	r22, r24
 3ae:	67 bb       	out	0x17, r22	; 23
				break;
 3b0:	08 95       	ret
			case INPUT_PULLUP:
				MCAL_DDRB &= ~au8_pin;
 3b2:	87 b3       	in	r24, 0x17	; 23
 3b4:	96 2f       	mov	r25, r22
 3b6:	90 95       	com	r25
 3b8:	89 23       	and	r24, r25
 3ba:	87 bb       	out	0x17, r24	; 23
			MCAL_PORTB |= au8_pin;
 3bc:	88 b3       	in	r24, 0x18	; 24
 3be:	68 2b       	or	r22, r24
 3c0:	68 bb       	out	0x18, r22	; 24
				break;
 3c2:	08 95       	ret
			case OUTPUT:
				MCAL_DDRB |= au8_pin;
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	68 2b       	or	r22, r24
 3c8:	67 bb       	out	0x17, r22	; 23
				break;
 3ca:	08 95       	ret
			default:
				break;
		}
		break;
		case PORTC:
		switch(au8_type)
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	49 f0       	breq	.+18     	; 0x3e2 <MCAL_GPIO_PinMode+0x88>
 3d0:	18 f0       	brcs	.+6      	; 0x3d8 <MCAL_GPIO_PinMode+0x7e>
 3d2:	42 30       	cpi	r20, 0x02	; 2
 3d4:	79 f0       	breq	.+30     	; 0x3f4 <MCAL_GPIO_PinMode+0x9a>
 3d6:	08 95       	ret
		{
			case INPUT_FLOAT:
				MCAL_DDRC &= ~au8_pin;
 3d8:	84 b3       	in	r24, 0x14	; 20
 3da:	60 95       	com	r22
 3dc:	68 23       	and	r22, r24
 3de:	64 bb       	out	0x14, r22	; 20
				break;
 3e0:	08 95       	ret
			case INPUT_PULLUP:
				MCAL_DDRC &= ~au8_pin;
 3e2:	84 b3       	in	r24, 0x14	; 20
 3e4:	96 2f       	mov	r25, r22
 3e6:	90 95       	com	r25
 3e8:	89 23       	and	r24, r25
 3ea:	84 bb       	out	0x14, r24	; 20
				MCAL_PORTC |= au8_pin;
 3ec:	85 b3       	in	r24, 0x15	; 21
 3ee:	68 2b       	or	r22, r24
 3f0:	65 bb       	out	0x15, r22	; 21
				break;
 3f2:	08 95       	ret
			case OUTPUT:
				MCAL_DDRC |= au8_pin;
 3f4:	84 b3       	in	r24, 0x14	; 20
 3f6:	68 2b       	or	r22, r24
 3f8:	64 bb       	out	0x14, r22	; 20
				break;
 3fa:	08 95       	ret
			default:
				break;
		}
		break;
		case PORTD:
		switch(au8_type)
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 400:	18 f0       	brcs	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	42 30       	cpi	r20, 0x02	; 2
 404:	79 f0       	breq	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 406:	08 95       	ret
		{
			case INPUT_FLOAT:
				MCAL_DDRD &= ~au8_pin;
 408:	81 b3       	in	r24, 0x11	; 17
 40a:	60 95       	com	r22
 40c:	68 23       	and	r22, r24
 40e:	61 bb       	out	0x11, r22	; 17
				break;
 410:	08 95       	ret
			case INPUT_PULLUP:
				MCAL_DDRD &= ~au8_pin;
 412:	81 b3       	in	r24, 0x11	; 17
 414:	96 2f       	mov	r25, r22
 416:	90 95       	com	r25
 418:	89 23       	and	r24, r25
 41a:	81 bb       	out	0x11, r24	; 17
				MCAL_PORTD |= au8_pin;
 41c:	82 b3       	in	r24, 0x12	; 18
 41e:	68 2b       	or	r22, r24
 420:	62 bb       	out	0x12, r22	; 18
				break;
 422:	08 95       	ret
			case OUTPUT:
				MCAL_DDRD |= au8_pin;
 424:	81 b3       	in	r24, 0x11	; 17
 426:	68 2b       	or	r22, r24
 428:	61 bb       	out	0x11, r22	; 17
 42a:	08 95       	ret

0000042c <MCAL_GPIO_PinState>:
void MCAL_GPIO_PinState(u8_t au8_port , u8_t au8_pin , u8_t au8_state){
	/**
	 * @brief We will switch over the au_8port given and once we find it, we will switch over the au8_type and then we set up our state.
	 * 
	 */
	switch(au8_port){
 42c:	81 11       	cpse	r24, r1
 42e:	0f c0       	rjmp	.+30     	; 0x44e <MCAL_GPIO_PinState+0x22>
		/**
		 * @brief The registers used in order to alter the I/P or O/P states. MCAL_PORTx.
		 * 
		 */
		case PORTA:
		switch(au8_state)
 430:	44 23       	and	r20, r20
 432:	19 f0       	breq	.+6      	; 0x43a <MCAL_GPIO_PinState+0xe>
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	39 f0       	breq	.+14     	; 0x446 <MCAL_GPIO_PinState+0x1a>
 438:	0a c0       	rjmp	.+20     	; 0x44e <MCAL_GPIO_PinState+0x22>
		{
			case LOW:
			MCAL_PORTA &= ~au8_pin;
 43a:	9b b3       	in	r25, 0x1b	; 27
 43c:	26 2f       	mov	r18, r22
 43e:	20 95       	com	r18
 440:	92 23       	and	r25, r18
 442:	9b bb       	out	0x1b, r25	; 27
			break;
 444:	24 c0       	rjmp	.+72     	; 0x48e <MCAL_GPIO_PinState+0x62>
			case HIGH:
			MCAL_PORTA |= au8_pin;
 446:	9b b3       	in	r25, 0x1b	; 27
 448:	96 2b       	or	r25, r22
 44a:	9b bb       	out	0x1b, r25	; 27
			break;
 44c:	20 c0       	rjmp	.+64     	; 0x48e <MCAL_GPIO_PinState+0x62>
			default:
			break;
		}
		break;
	}
	switch(au8_port){
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	71 f4       	brne	.+28     	; 0x46e <MCAL_GPIO_PinState+0x42>
		case PORTB:
			switch(au8_state)
 452:	44 23       	and	r20, r20
 454:	19 f0       	breq	.+6      	; 0x45c <MCAL_GPIO_PinState+0x30>
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	31 f0       	breq	.+12     	; 0x466 <MCAL_GPIO_PinState+0x3a>
 45a:	09 c0       	rjmp	.+18     	; 0x46e <MCAL_GPIO_PinState+0x42>
			{
				case LOW:
					MCAL_PORTB &= ~au8_pin;
 45c:	88 b3       	in	r24, 0x18	; 24
 45e:	60 95       	com	r22
 460:	68 23       	and	r22, r24
 462:	68 bb       	out	0x18, r22	; 24
					break;
 464:	08 95       	ret
				case HIGH:
					MCAL_PORTB |= au8_pin;
 466:	88 b3       	in	r24, 0x18	; 24
 468:	68 2b       	or	r22, r24
 46a:	68 bb       	out	0x18, r22	; 24
					break;
 46c:	08 95       	ret
				default:
					break;
			}
			break;
	}
	switch(au8_port){
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	71 f4       	brne	.+28     	; 0x48e <MCAL_GPIO_PinState+0x62>
		case PORTC:
			switch(au8_state)
 472:	44 23       	and	r20, r20
 474:	19 f0       	breq	.+6      	; 0x47c <MCAL_GPIO_PinState+0x50>
 476:	41 30       	cpi	r20, 0x01	; 1
 478:	31 f0       	breq	.+12     	; 0x486 <MCAL_GPIO_PinState+0x5a>
 47a:	09 c0       	rjmp	.+18     	; 0x48e <MCAL_GPIO_PinState+0x62>
			{
				case LOW:
					MCAL_PORTC &= ~au8_pin;
 47c:	85 b3       	in	r24, 0x15	; 21
 47e:	60 95       	com	r22
 480:	68 23       	and	r22, r24
 482:	65 bb       	out	0x15, r22	; 21
					break;
 484:	08 95       	ret
				case HIGH:
					MCAL_PORTC |= au8_pin;
 486:	85 b3       	in	r24, 0x15	; 21
 488:	68 2b       	or	r22, r24
 48a:	65 bb       	out	0x15, r22	; 21
					break;
 48c:	08 95       	ret
				default:
					break;
			}
			break;
	}
	switch(au8_port){
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	69 f4       	brne	.+26     	; 0x4ac <MCAL_GPIO_PinState+0x80>
		case PORTD:
			switch(au8_state)
 492:	44 23       	and	r20, r20
 494:	19 f0       	breq	.+6      	; 0x49c <MCAL_GPIO_PinState+0x70>
 496:	41 30       	cpi	r20, 0x01	; 1
 498:	31 f0       	breq	.+12     	; 0x4a6 <MCAL_GPIO_PinState+0x7a>
 49a:	08 95       	ret
			{
				case LOW:
					MCAL_PORTD &= ~au8_pin;
 49c:	82 b3       	in	r24, 0x12	; 18
 49e:	60 95       	com	r22
 4a0:	68 23       	and	r22, r24
 4a2:	62 bb       	out	0x12, r22	; 18
					break;
 4a4:	08 95       	ret
				case HIGH:
					MCAL_PORTD |= au8_pin;
 4a6:	82 b3       	in	r24, 0x12	; 18
 4a8:	68 2b       	or	r22, r24
 4aa:	62 bb       	out	0x12, r22	; 18
 4ac:	08 95       	ret

000004ae <MCAL_SPI_init>:
 * @param au8_clockMode CLOCK MODES (LEADING AND TRAILING EDGES respectively defined in MACROS).
 * @param au8_spiSpeed connection speed variable.
 */
void MCAL_SPI_init(u8_t au8_spiMode, u8_t au8_dataOutMode, u8_t au8_clockMode, u8_t au8_spiSpeed){
	//CLEAR THE REGISTER
	MCAL_SPI_SPCR = 0; 
 4ae:	1d b8       	out	0x0d, r1	; 13
	
	//CHECK IF SPI NEEDS TO ENABLE SPI2X
	if(!(au8_spiSpeed%2))
 4b0:	20 ff       	sbrs	r18, 0
	{
		//ENABLE SPI2X
		setBit(MCAL_SPI_SPSR, 0);
 4b2:	70 9a       	sbi	0x0e, 0	; 14
	{
		//DO NOTHING
	}
	
	//ENABLE SPI PERIPHERAL //SET SPI MODE //SET DATA OUT ORDER MODE //SET CLK MODE //SET SPI SPEED
	MCAL_SPI_SPCR |= (0xC0) | (au8_spiMode << 4) | (au8_dataOutMode << 5) | (au8_clockMode << 2) | (au8_spiSpeed/2);
 4b4:	9d b1       	in	r25, 0x0d	; 13
 4b6:	44 0f       	add	r20, r20
 4b8:	44 0f       	add	r20, r20
 4ba:	90 6c       	ori	r25, 0xC0	; 192
 4bc:	49 2b       	or	r20, r25
 4be:	30 e2       	ldi	r19, 0x20	; 32
 4c0:	63 9f       	mul	r22, r19
 4c2:	b0 01       	movw	r22, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	64 2b       	or	r22, r20
 4c8:	30 e1       	ldi	r19, 0x10	; 16
 4ca:	83 9f       	mul	r24, r19
 4cc:	c0 01       	movw	r24, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	86 2b       	or	r24, r22
 4d2:	26 95       	lsr	r18
 4d4:	28 2b       	or	r18, r24
 4d6:	2d b9       	out	0x0d, r18	; 13
 4d8:	08 95       	ret

000004da <MCAL_SPI_masterSendRecvByte>:
void MCAL_SPI_masterSendRecvByte(u8_t au8_sentData, u8_t* pu8_recvData){
	
	u8_t au8_timeOut = 0;
	
	//STORE THE DATA THAT WILL BE SENT
	MCAL_SPI_SPDR = au8_sentData;
 4da:	8f b9       	out	0x0f, r24	; 15
	
	//WAIT FOR GPIO TO SET SS TO LOW
	
	while(!(getBit(MCAL_SPI_SPSR, 7)) && (au8_timeOut < TIMEOUT_DELAY)){
 4dc:	77 99       	sbic	0x0e, 7	; 14
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <MCAL_SPI_masterSendRecvByte+0x18>
 4e0:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e2:	95 e0       	ldi	r25, 0x05	; 5
 4e4:	9a 95       	dec	r25
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <MCAL_SPI_masterSendRecvByte+0xa>
 4e8:	00 00       	nop
 4ea:	77 99       	sbic	0x0e, 7	; 14
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <MCAL_SPI_masterSendRecvByte+0x18>
 4ee:	81 50       	subi	r24, 0x01	; 1
 4f0:	c1 f7       	brne	.-16     	; 0x4e2 <MCAL_SPI_masterSendRecvByte+0x8>
		au8_timeOut++;
		_delay_us(1);
	}
	
	*pu8_recvData = MCAL_SPI_SPDR;
 4f2:	8f b1       	in	r24, 0x0f	; 15
 4f4:	fb 01       	movw	r30, r22
 4f6:	80 83       	st	Z, r24
 4f8:	08 95       	ret

000004fa <MCAL_SPI_slaveSendRecvByte>:
 */
void MCAL_SPI_slaveSendRecvByte(u8_t au8_sentData, u8_t* pu8_recvData){
	
	//MCAL_SPI_SPDR = au8_sentData;
	
	if(getBit(MCAL_SPI_SPSR, 7))
 4fa:	77 9b       	sbis	0x0e, 7	; 14
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <MCAL_SPI_slaveSendRecvByte+0xa>
	{
		*pu8_recvData = MCAL_SPI_SPDR;
 4fe:	8f b1       	in	r24, 0x0f	; 15
 500:	fb 01       	movw	r30, r22
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <MCAL_UART_init>:
	{
		MCAL_UART_sendByte(pu8_dataStream[au8_iterator]);
		au8_iterator++;
	}
	return;
}
 506:	28 e1       	ldi	r18, 0x18	; 24
 508:	2a b9       	out	0x0a, r18	; 10
 50a:	26 e8       	ldi	r18, 0x86	; 134
 50c:	20 bd       	out	0x20, r18	; 32
 50e:	89 b9       	out	0x09, r24	; 9
 510:	90 bd       	out	0x20, r25	; 32
 512:	08 95       	ret

00000514 <MCAL_UART_recvByte>:
 * 
 * @param pu8_dataBye a pointer to the data to be received.
 */
void MCAL_UART_recvByte(u8_t* pu8_dataBye){
	//CHECK IF THERE'S ANY DATA IN UDR REGISTER 
	if(getBit(MCAL_UART_UCSRA, 7))
 514:	5f 9b       	sbis	0x0b, 7	; 11
 516:	03 c0       	rjmp	.+6      	; 0x51e <MCAL_UART_recvByte+0xa>
	{
		*pu8_dataBye = MCAL_UART_UDR;
 518:	2c b1       	in	r18, 0x0c	; 12
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
 51e:	08 95       	ret

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
